interface Produce {
  id: ID!
  name: String!
  quantity: Int!
  price: Int!
  nutrients: [String]
}

type Fruit implements Produce {
  id: ID!
  "one line description"
  oldFieldWithDescription: String  @deprecated
  name: String!
  quantity: Int!
  "Price per unit"
  price: Int!
  nutrients: [String]
  isSeedless: Boolean
  ripenessIndicators: [String]  
}

type Vegetable implements Produce {
  id: ID!
  """
  multiline
  description
  """
  oldName: String @deprecated(reason: "Field is no longer supported")
  name: String!
  quantity: Int!
  price: Int!
  nutrients: [String]
  vegetableFamily: String
  isPickled: Boolean
}

union Offer = Discount | Coupon 

type Discount {
  id: ID!
  oldFieldWithoutDescription: String  @deprecated
  code: String!
  percent: Float!
  description: String
  qualifications: [String]
}

type Coupon {
  id: ID!
  code: String!
  description: String
  amount: Float!
}

type Order {
  id: ID!
  vendor: Stall!
  items: [OrderItem!]!
  orderOffer: Offer
}

type Stall {
  id: ID!
  name: String!
  stallNumber: String!
  availableProduce: [Produce!]!
}

type OrderItem {
  id: ID!
  quantity: Int!
  price: Int!
  produce: Produce!
}

input OrderItemInput {
  quantity: Int!
  price: Int!
  produce: ID!
}

type Query {
  stalls: [Stall!]
  orders: [Order!]
  produce: [Produce!]
  fruits: [Fruit!]
  vegetables: [Vegetable!]
  discounts: [Discount!]
  coupons: [Coupon!]
}

type Mutation {
  createOrder(vendorId: ID!, items: [OrderItemInput!]!): Order!
  updateOrder(id: ID!, items: [OrderItemInput!]!): Order!
  deleteOrder(id: ID!): Order! 
}

type Subscription {
  order: Order!
}


